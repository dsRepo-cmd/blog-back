[
  {
    "id": "1",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16893,
    "createdAt": "2023-01-20T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "2",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3023,
    "createdAt": "2023-02-20T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "3",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 216,
    "createdAt": "2023-03-20T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "4",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 5,
    "createdAt": "2023-04-20T19:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "5",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16896,
    "createdAt": "2023-05-20T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "6",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3024,
    "createdAt": "2023-06-20T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "7",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 219,
    "createdAt": "2023-07-20T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "8",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 7,
    "createdAt": "2023-08-20T19:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "9",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16893,
    "createdAt": "2023-09-20T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "10",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3023,
    "createdAt": "2023-10-20T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "11",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 218,
    "createdAt": "2023-11-20T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "12",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 8,
    "createdAt": "2023-12-20T19:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "13",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16914,
    "createdAt": "2023-01-01T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "14",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3025,
    "createdAt": "2023-01-02T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "15",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 221,
    "createdAt": "2023-01-03T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "16",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 6,
    "createdAt": "2024-01-04T19:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "17",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16908,
    "createdAt": "2023-01-05T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "18",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3023,
    "createdAt": "2023-01-06T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "19",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 218,
    "createdAt": "2023-01-07T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "20",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 10,
    "createdAt": "2023-01-08T19:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "21",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16893,
    "createdAt": "2023-01-09T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "22",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3024,
    "createdAt": "2023-01-10T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "23",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 216,
    "createdAt": "2023-01-11T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "24",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 8,
    "createdAt": "2023-01-12T19:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "25",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16893,
    "createdAt": "2023-01-13T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "26",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3025,
    "createdAt": "2023-01-15T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "27",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 246,
    "createdAt": "2023-01-01T15:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "28",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 5,
    "createdAt": "2024-01-20T01:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "29",
    "title": "JavaScript",
    "subtitle": "Empowering Web Development",
    "img": "https://upload.wikimedia.org/wikipedia/commons/9/99/Unofficial_JavaScript_logo_2.svg",
    "views": 16894,
    "createdAt": "2023-01-25T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "isPublished": true,
    "blocks": [
      {
        "id": "1",
        "type": "TEXT",
        "title": "Getting Started with JavaScript:",
        "paragraphs": [
          "JavaScript is primarily used to enhance user interactivity on the client side, allowing developers to manipulate the Document Object Model (DOM) and respond to user actions. It's executed in web browsers, making it an integral part of modern web development."
        ],
        "paragraphIndex": 0
      },
      {
        "id": "1703700436089",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with the classic \"Hello, World!\" example in JavaScript. This simple script outputs a message to the browser console:"
        ],
        "title": "Hello World in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700457861",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1703700479932",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript is a loosely typed language, meaning you don't need to declare the data type of a variable explicitly. Here's an example of declaring variables and working with different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700513324",
        "type": "CODE",
        "code": "let message = \"Hello, JavaScript!\"; // String\nlet number = 42; // Number\nlet isTrue = true; // Boolean\n\nconsole.log(message);\nconsole.log(number);\nconsole.log(isTrue);"
      },
      {
        "id": "1703700523600",
        "type": "TEXT",
        "paragraphs": [
          "JavaScript supports typical control flow statements like if, else, and switch. This allows developers to make decisions in their code based on certain conditions. Here's a simple if statement:"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703700549624",
        "type": "CODE",
        "code": "let temperature = 25;\n\nif (temperature > 30) {\n  console.log(\"It's a hot day!\");\n} else {\n  console.log(\"It's not too hot today.\");\n}"
      },
      {
        "id": "1703706094343",
        "type": "TEXT",
        "paragraphs": [
          "Functions are a fundamental building block in JavaScript. They allow you to encapsulate a block of code and execute it whenever needed. Here's a basic example:"
        ],
        "title": "Functions in JavaScript:",
        "paragraphIndex": 0
      },
      {
        "id": "1703706138898",
        "type": "CODE",
        "code": "function greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"John\");"
      },
      {
        "id": "1703860556308",
        "type": "IMAGE",
        "src": "https://carldesouza.com/wp-content/uploads/2020/09/img_5f5af36e4d93c.png",
        "title": "How to Beautify a JavaScript File in Visual Studio Code"
      },
      {
        "id": "1704312500713",
        "type": "CODE",
        "code": "console.log(\"Hello, World!\");"
      },
      {
        "id": "1704987117076",
        "type": "TEXT",
        "paragraphs": [
          ""
        ],
        "title": "Text"
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "email": "admin@mail.com",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg"
    }
  },
  {
    "id": "30",
    "title": "Pyton Runtime Environments New",
    "subtitle": "What's new in Pyton ?",
    "img": "https://images.unsplash.com/photo-1649180556628-9ba704115795?q=80&w=2062&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
    "views": 3026,
    "createdAt": "2023-01-26T19:30:32.059Z",
    "userId": "2",
    "type": "ECONOMICS",
    "isPublished": true,
    "blocks": [
      {
        "id": "1703720162508",
        "type": "TEXT",
        "paragraphs": [
          "Python's syntax is designed to be clear and readable, making it an excellent choice for beginners and experienced developers alike. It supports both procedural and object-oriented programming paradigms, allowing flexibility in coding styles."
        ],
        "title": "Getting Started with Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720230175",
        "type": "TEXT",
        "paragraphs": [
          "Embark on your Python journey with the quintessential \"Hello, World!\" program:"
        ],
        "title": "Hello World in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720246087",
        "type": "CODE",
        "code": "print(\"Hello, World!\")"
      },
      {
        "id": "1703720264743",
        "type": "TEXT",
        "paragraphs": [
          "In Python, you don't need to explicitly declare variable types. Here's an example showcasing different data types:"
        ],
        "title": "Variables and Data Types:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720289088",
        "type": "CODE",
        "code": "message = \"Hello, Python!\"  # String\nnumber = 42  # Integer\nis_true = True  # Boolean\n\nprint(message)\nprint(number)\nprint(is_true)"
      },
      {
        "id": "1703720298215",
        "type": "TEXT",
        "paragraphs": [
          "Python supports standard control flow statements like if, else, and elif for decision-making. Here's an example using an if statement:\n\n"
        ],
        "title": "Control Flow:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720315759",
        "type": "CODE",
        "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")"
      },
      {
        "id": "1703720345239",
        "type": "TEXT",
        "paragraphs": [
          "Functions play a crucial role in Python, enabling developers to modularize code. Here's a simple function to greet a person:"
        ],
        "title": "Functions in Python:",
        "paragraphIndex": 0
      },
      {
        "id": "1703720367366",
        "type": "CODE",
        "code": "def greet(name):\n    print(\"Hello, \" + name + \"!\")\n\ngreet(\"John\")"
      }
    ],
    "user": {
      "id": "2",
      "username": "user",
      "email": "user@mail.com",
      "roles": [
        "USER"
      ],
      "password": "123",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg"
    }
  },
  {
    "id": "31",
    "title": " Unleashing Rust",
    "subtitle": "A Modern Language for Safe and Efficient Systems Programming",
    "img": "https://logowik.com/content/uploads/images/rust4784.logowik.com.webp",
    "views": 218,
    "createdAt": "2023-01-27T19:30:32.059Z",
    "userId": "1",
    "type": "IT",
    "blocks": [
      {
        "id": "1703866814381",
        "type": "TEXT",
        "paragraphs": [
          "Rust, a systems programming language developed by Mozilla, has gained popularity for its focus on safety, performance, and concurrency. As a language designed for low-level systems programming, Rust offers memory safety without sacrificing performance, making it an ideal choice for building robust and efficient applications. Let's delve into the key features of Rust and explore some code snippets to showcase its capabilities."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1703866833041",
        "type": "TEXT",
        "paragraphs": [
          "Rust is known for its ownership system, which ensures memory safety without the need for a garbage collector. It also features a powerful borrow checker that enforces strict rules on references, preventing common programming errors like null pointer dereferencing."
        ],
        "title": "Getting Started with Rust:",
        "paragraphIndex": 0
      },
      {
        "id": "1703866853061",
        "type": "TEXT",
        "paragraphs": [
          "Begin your Rust exploration with the classic \"Hello, World!\" program:"
        ],
        "title": "Hello World in Rust:",
        "paragraphIndex": 0
      }
    ],
    "user": {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "avatar": "https://www.kino-teatr.ru/acter/album/51803/33584.jpg",
      "features": {
        "isAppRedesigned": true
      },
      "jsonSettings": {
        "theme": "app_light_theme",
        "isFirstVisit": true,
        "settingsPageHasBeenOpen": false,
        "isArticlesPageWasOpened": true
      }
    },
    "isPublished": true
  },
  {
    "id": "32",
    "title": "Introduction to TypeScript with Code Examples",
    "subtitle": "",
    "user": {
      "id": "3",
      "email": "dev@mail.com",
      "username": "dev",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/1200px-Typescript_logo_2020.svg.png",
    "views": 5,
    "createdAt": "2023-01-28T19:30:32.059Z",
    "type": "ALL",
    "blocks": [
      {
        "id": "1705779054560",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript (TS) is a superset of JavaScript that adds static typing to the language, making it easier to catch errors during development and improving code maintainability. In this article, we'll provide a brief overview of TypeScript and explore some code examples to illustrate its features."
        ],
        "title": "",
        "paragraphIndex": 0
      },
      {
        "id": "1705779058043",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript is designed to address the shortcomings of JavaScript by introducing a type system. With TypeScript, developers can specify the types of variables, function parameters, and return values, allowing for more robust code. The TypeScript code is then transpiled into plain JavaScript, ensuring compatibility with all JavaScript environments."
        ],
        "title": "What is TypeScript?",
        "paragraphIndex": 0
      },
      {
        "id": "1705779090891",
        "type": "TEXT",
        "paragraphs": [
          "Let's start with some basic types in TypeScript:\n\n"
        ],
        "title": "Basic Types",
        "paragraphIndex": 0
      },
      {
        "id": "1705779103926",
        "type": "CODE",
        "code": "// Boolean\nlet isDone: boolean = false;\n\n// Number\nlet age: number = 25;\n\n// String\nlet name: string = \"John\";\n\n// Array\nlet numbers: number[] = [1, 2, 3];\n\n// Tuple\nlet person: [string, number] = [\"John\", 25];"
      },
      {
        "id": "1705779107887",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript allows you to define function parameters and return types:"
        ],
        "title": "Functions and Interfaces",
        "paragraphIndex": 0
      },
      {
        "id": "1705779125258",
        "type": "CODE",
        "code": "// Function with types\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\n// Interface for object shape\ninterface Person {\n    name: string;\n    age: number;\n}\n\n// Function that takes an object with the Person interface\nfunction greet(person: Person): string {\n    return `Hello, ${person.name}!`;\n}"
      },
      {
        "id": "1705779135006",
        "type": "TEXT",
        "paragraphs": [
          "TypeScript supports object-oriented programming concepts, such as classes and inheritance:"
        ],
        "title": "Classes and Inheritance",
        "paragraphIndex": 0
      },
      {
        "id": "1705779143242",
        "type": "CODE",
        "code": "// Class definition\nclass Animal {\n    constructor(public name: string) {}\n\n    makeSound(): void {\n        console.log(\"Some generic sound\");\n    }\n}\n\n// Inheritance\nclass Dog extends Animal {\n    makeSound(): void {\n        console.log(\"Woof! Woof!\");\n    }\n}\n\n// Create an instance of Dog\nconst myDog = new Dog(\"Buddy\");\nmyDog.makeSound(); // Output: Woof! Woof!"
      },
      {
        "id": "1705779155786",
        "type": "TEXT",
        "paragraphs": [
          "Generics allow you to write flexible and reusable functions and classes:"
        ],
        "title": "Generics",
        "paragraphIndex": 0
      },
      {
        "id": "1705779170050",
        "type": "CODE",
        "code": "// Generic function\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\n// Generic class\nclass Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\n// Using the generic function and class\nconst result = identity<number>(42);\nconst numberBox = new Box<number>(10);"
      },
      {
        "id": "1705779179013",
        "type": "TEXT",
        "paragraphs": [
          "This brief overview of TypeScript demonstrates its ability to enhance JavaScript development by adding static typing and other advanced features. As you explore TypeScript further, you'll find that it provides a powerful toolset for building scalable and maintainable applications."
        ],
        "title": "Conclusion",
        "paragraphIndex": 0
      }
    ],
    "isPublished": true
  },
  {
    "id": "33",
    "title": "",
    "subtitle": "",
    "user": {
      "id": "65b80c4607bceee2e409feb4",
      "email": "user@mail.com",
      "username": "user",
      "avatar": "https://www.themoviedb.org/t/p/original/xzwtlufGF7SyW9qU5djqQICygo5.jpg",
      "roles": [
        "USER"
      ]
    },
    "img": "https://picsum.photos/650/400?random=1",
    "views": 0,
    "createdAt": "2024-01-29T20:38:03.559Z",
    "type": "ALL",
    "blocks": [],
    "isPublished": false
  }
]